function init(self)
	-- Add initialization code here
	FLOOR_ID = go.get_id()
end

local function breaking(self)

end

local function move(self)

end



function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == hash("contact_point_response") and message.other_id == FOX_SHOUT then
		-- check that the object is something we consider an obstacle
		print(sender)
		pprint("normal"..message.normal, "distance"..message.distance)
		breaking(self, message.normal, message.distance)
		msg.post("/broken_branch", hash("pickable_broken_branch")
	end
end

local function handle_obstacle_contact(self, normal, distance)
	-- don't care about anything but normals beyond the threshold
	-- we do this to eliminate false-positives such as ceiling hits when
	-- jumping next to a wall while moving into the wall
	if normal.y < NORMAL_THRESHOLD and normal.y > -NORMAL_THRESHOLD then
		normal.y = 0
	end
	if normal.x < NORMAL_THRESHOLD and normal.x > -NORMAL_THRESHOLD then
		normal.x = 0
	end
	-- update distance in case the normals have changed
	distance = distance * vmath.length(normal)

	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > NORMAL_THRESHOLD then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > NORMAL_THRESHOLD then
		if not self.previous_ground_contact then
			-- add some particles 
			-- particlefx.play("#dust")
			-- reset any "squish" that may have been applied
			--go.set("visuals", "scale", 1)
			self.double_jump = false
		end
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -NORMAL_THRESHOLD then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == hash("contact_point_response") and message.other_id == FLOOR_ID then
		-- check that the object is something we consider an obstacle
		print(sender)
		pprint("normal"..message.normal, "distance"..message.distance)
		handle_obstacle_contact(self, message.normal, message.distance)
	end
end